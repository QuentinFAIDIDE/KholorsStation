stages:
  - build-image
  - build
  - test
  - versionning
  - package
  - release

.linux-cmake-template: &linux-cmake-config
  image: ${CI_REGISTRY_IMAGE}/builder:latest
  cache:
    - key: "linux-${CI_PROJECT_NAME}-build-1" #increment the number when you wanna clear the cmake cache out of a bug
      paths:
        - build
        - libs
  tags:
    - linux-local

.windows-cmake-template: &windows-cmake-config
  cache:
    - key: "windows-${CI_PROJECT_NAME}-build-1"
      paths:
        - build
        - libs
  before_script:
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -SkipAutomaticLocation -SetDefaultWindowTitle -InstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community\"
  tags:
    - windows-local

build-image:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/base-builder.Containerfile" --destination "${CI_REGISTRY_IMAGE}/builder:latest"
  only:
    changes:
      - base-builder.Containerfile
    refs:
      - master
  except:
    refs:
      - tags
  tags:
    - linux-local

build-linux:
  stage: build
  <<: *linux-cmake-config
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - make -j4
  only:
    refs:
      - master
  except:
    refs:
      - tags

build-windows:
  stage: build
  <<: *windows-cmake-config
  script:
    - cmake --preset windows -DCMAKE_BUILD_TYPE=Release .
    - cmake --build build
  only:
    refs:
      - master
  except:
    refs:
      - tags

test-linux:
  stage: test
  <<: *linux-cmake-config
  script:
    - cd build
    # we have to disable example and example64 tests from zlib...
    # our version of zlib does not yet include the january 2024 change
    # that allow to skip them in project where add_subdirectory is used to add zlib.
    - ctest -E "example"
  only:
    refs:
      - master
  except:
    refs:
      - tags

versionning:
  image: node:21.7.3
  stage: versionning
  script:
    - npm install @semantic-release/gitlab@13.0.3
    - npx semantic-release
  only:
    refs:
      - master
  tags:
    - linux-local

linux-package:
  stage: package
  <<: *linux-cmake-config
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release
    - rm -rf pkg
    - mkdir pkg
    - make DESTDIR=./pkg/tree install -j4
  only:
    refs:
      - tags

linux-deb:
  stage: release
  <<: *linux-cmake-config
  script:
    - cd build
    - rm -rf debian-pkg
    - mkdir debian-pkg
    - cp -r pkg/tree debian-pkg/kholors-${CI_COMMIT_TAG}
    - cd debian-pkg/kholors-${CI_COMMIT_TAG}
    - mkdir DEBIAN
    - cp ../../../res/control DEBIAN/control
    - CI_COMMIT_TAG_SHORTENED=$(echo "${CI_COMMIT_TAG}" | sed "s/v//g")
    - sed -i "s/VERSION_TO_REPLACE/${CI_COMMIT_TAG_SHORTENED}/g" DEBIAN/control
    - cd ..
    - dpkg-deb --build kholors-${CI_COMMIT_TAG}
    - apt install ./kholors-${CI_COMMIT_TAG}.deb
  artifacts:
    paths:
      - build/debian-pkg/kholors-*.deb
  only:
    refs:
      - tags

linux-release-archive:
  stage: release
  <<: *linux-cmake-config
  script:
    - cd build
    - rm -rf package
    - cp -r pkg package
    - cp ../res/linux_install.sh package/install.sh
    - cp ../res/linux_uninstall.sh package/uninstall.sh
    - cd package
    - tar -czvf kholors_${CI_COMMIT_TAG}.tar.gz *
  artifacts:
    paths:
      - build/package/kholors_*.tar.gz
  only:
    refs:
      - tags
# all jobs after this stage (release) must use dependencies: [] to prevent download all artifacts
