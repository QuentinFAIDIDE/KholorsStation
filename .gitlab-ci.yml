stages:
  - build-image
  - build
  - test
  - versionning
  - package
  - release-debug
  - release-archive
  - release-package
  - release-upload

.linux-cmake-template: &linux-cmake-config
  image: ${CI_REGISTRY_IMAGE}/builder:latest
  cache:
    - key: "linux-${CI_PROJECT_NAME}-build-4" #increment the number when you wanna clear the cmake cache
      paths:
        - build
        - libs
  tags:
    - linux-local

.windows-cmake-template: &windows-cmake-config
  cache:
    - key: "windows-${CI_PROJECT_NAME}-build-5" #increment the number when you wanna clear the cmake cache
      paths:
        - build
        - libs
  before_script:
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -SkipAutomaticLocation -SetDefaultWindowTitle -InstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community\" -DevCmdArguments "-arch=x64 -no_logo"
  tags:
    - windows-local

build-image:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/base-builder.Containerfile" --destination "${CI_REGISTRY_IMAGE}/builder:latest"
  only:
    changes:
      - base-builder.Containerfile
    refs:
      - master
  except:
    refs:
      - tags
  tags:
    - linux-local

build-linux:
  stage: build
  <<: *linux-cmake-config
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - make -j6
  only:
    refs:
      - master
  except:
    refs:
      - tags

build-windows:
  stage: build
  <<: *windows-cmake-config
  script:
    - cmake --preset windows -DCMAKE_BUILD_TYPE=RelWithDebInfo .
    - cmake --build build --parallel 6
  only:
    refs:
      - master
  except:
    refs:
      - tags

test-linux:
  stage: test
  <<: *linux-cmake-config
  script:
    - cd build
    # we have to disable example and example64 tests from zlib...
    # our version of zlib does not yet include the january 2024 change
    # that allow to skip them in project where add_subdirectory is used to add zlib.
    - ctest -E "example"
  only:
    refs:
      - master
  except:
    refs:
      - tags

versionning:
  image: node:21.7.3
  stage: versionning
  script:
    - npm install @semantic-release/gitlab@13.0.3
    - npx semantic-release
  only:
    refs:
      - master
  tags:
    - linux-local

linux-package:
  stage: package
  <<: *linux-cmake-config
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - rm -rf pkg
    - mkdir pkg
    - make DESTDIR=./pkg/tree install -j6
    - cp -r pkg pkg-debug
    - strip -s pkg/tree/usr/lib/vst3/KholorsSink.vst3/Contents/x86_64-linux/KholorsSink.so
    - strip -s pkg/tree/usr/bin/KholorsStation
  only:
    refs:
      - tags

linux-release-debug-archive:
  stage: release-debug
  dependencies: []
  <<: *linux-cmake-config
  script:
    - cd build
    - rm -rf package-debug
    - cp -r pkg-debug package-debug
    - cp ../res/linux_install.sh package-debug/install.sh
    - cp ../res/linux_uninstall.sh package-debug/uninstall.sh
    - cd package-debug
    - tar -czvf kholors_debug_${CI_COMMIT_TAG}.tar.gz *
  artifacts:
    paths:
      - build/package-debug/kholors_debug_*.tar.gz
  only:
    refs:
      - tags

windows-release-debug-artefacts:
  stage: release-debug
  dependencies: []
  <<: *windows-cmake-config
  script:
    - cp build\src\StationApp\StationApp_artefacts\Debug\KholorsStation.pdb .\KholorsStation_${CI_COMMIT_TAG}.pdb
    - cp build\src\SinkPlugin\SinkPlugin_artefacts\Debug\KholorsSink_SharedCode.pdb .\KholorsSink_SharedCode_${CI_COMMIT_TAG}.pdb
  artifacts:
    paths:
      - Kholors*.pdb
  only:
    refs:
      - tags

linux-release-archive:
  stage: release-archive
  dependencies: []
  <<: *linux-cmake-config
  script:
    - cd build
    - rm -rf package
    - cp -r pkg package
    - cp ../res/linux_install.sh package/install.sh
    - cp ../res/linux_uninstall.sh package/uninstall.sh
    - cd package
    - tar -czvf kholors_${CI_COMMIT_TAG}.tar.gz *
  artifacts:
    paths:
      - build/package/kholors_*.tar.gz
  only:
    refs:
      - tags

linux-deb:
  stage: release-package
  dependencies: []
  <<: *linux-cmake-config
  script:
    - cd build
    - rm -rf debian-pkg
    - mkdir debian-pkg
    - cp -r pkg/tree debian-pkg/kholors-${CI_COMMIT_TAG}
    - cd debian-pkg/kholors-${CI_COMMIT_TAG}
    - mkdir DEBIAN
    - cp ../../../res/control DEBIAN/control
    - CI_COMMIT_TAG_SHORTENED=$(echo "${CI_COMMIT_TAG}" | sed "s/v//g")
    - sed -i "s/VERSION_TO_REPLACE/${CI_COMMIT_TAG_SHORTENED}/g" DEBIAN/control
    - cd ..
    - dpkg-deb --build kholors-${CI_COMMIT_TAG}
    - apt install ./kholors-${CI_COMMIT_TAG}.deb
  artifacts:
    paths:
      - build/debian-pkg/kholors-*.deb
  only:
    refs:
      - tags

windows-installer:
  stage: release-package
  dependencies: []
  <<: *windows-cmake-config
  script:
    - $BASE_BUILD_PATH = $PWD.Path
    - $KHOLORS_BINARY_PATH = "build\src\StationApp\StationApp_artefacts\Debug\KholorsStation.exe"
    - $KHOLORS_VSTLIB_PATH = "build\src\SinkPlugin\SinkPlugin_artefacts\Debug\VST3\KholorsSink.vst3\Contents\x86_64-win\KholorsSink.vst3"
    - $ACS_DLIB = "C:\Users\tester\Microsoft.Trusted.Signing.Client.1.0.60\bin\x64\Azure.CodeSigning.Dlib.dll"
    - $ACS_JSON = "C:\Users\tester\Microsoft.Trusted.Signing.Client.1.0.60\metadata.json"
    - cd "C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64"
    - .\signtool.exe sign /debug /v /fd SHA256 /tr "http://timestamp.acs.microsoft.com" /td SHA256 /dlib $ACS_DLIB /dmdf $ACS_JSON $KHOLORS_BINARY_PATH
    - .\signtool.exe sign /debug /v /fd SHA256 /tr "http://timestamp.acs.microsoft.com" /td SHA256 /dlib $ACS_DLIB /dmdf $ACS_JSON $KHOLORS_VSTLIB_PATH
    - cd $BASE_BUILD_PATH
    - cd res
    - (Get-Content installer.nsi).Replace('1.0.0', ${env:CI_COMMIT_TAG}) | Set-Content installer.nsi
    - makensis .\installer.nsi
    - cd "C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64"
    - .\signtool.exe sign /debug /v /fd SHA256 /tr "http://timestamp.acs.microsoft.com" /td SHA256 /dlib $ACS_DLIB /dmdf $ACS_JSON "${BASE_BUILD_PATH}\res\KholorsStation-${env:CI_COMMIT_TAG}-Install.exe"
  artifacts:
    paths:
      - res/KholorsStation*.exe
  only:
    refs:
      - tags

release-upload:
  stage: release-upload
  image: docker.io/ubuntu:oracular-20241009
  script:
    # install required packages
    - apt-get -y update
    - apt-get -y install zip wget curl
    # create the release archive (to be distributed to users)
    - mkdir kholors-${CI_COMMIT_TAG}
    - mkdir kholors-${CI_COMMIT_TAG}/Windows
    - mkdir kholors-${CI_COMMIT_TAG}/Linux
    - mkdir kholors-${CI_COMMIT_TAG}/Linux/Deb
    - mkdir kholors-${CI_COMMIT_TAG}/Linux/Archive
    - cp res/KholorsStation*.exe kholors-${CI_COMMIT_TAG}/Windows/
    - cp build/debian-pkg/kholors-*.deb kholors-${CI_COMMIT_TAG}/Linux/Deb/
    - cp build/package/kholors_*.tar.gz kholors-${CI_COMMIT_TAG}/Linux/Archive/
    - zip -r kholors-${CI_COMMIT_TAG}.zip kholors-${CI_COMMIT_TAG}
    # create the debug archive (for support use)
    - mkdir kholors-debug-${CI_COMMIT_TAG}
    - cp Kholors*.pdb kholors-debug-${CI_COMMIT_TAG}/
    - cp build/package-debug/kholors_debug_*.tar.gz kholors-debug-${CI_COMMIT_TAG}/
    - zip -r kholors-debug-${CI_COMMIT_TAG}.zip kholors-debug-${CI_COMMIT_TAG}
    # configure minio cli client
    - wget https://dl.min.io/client/mc/release/linux-amd64/mc
    - chmod +x mc
    - mv mc /usr/local/bin
    - mc alias set myminio http://minio.gitlab-runner:9000 minio ${MINIO_S3_SECRET}
    # upload archives
    - mc cp kholors-${CI_COMMIT_TAG}.zip myminio/releases/kholors/
    - mc cp kholors-debug-${CI_COMMIT_TAG}.zip myminio/releases/kholors/
    # call the api to insert the minor release into the database
    - export MINIO_RELEASE_PATH="kholors/kholors-${CI_COMMIT_TAG}.zip"
    - export CREATE_RELEASE_ENDPOINT="http://products-service-svc.artifaktnd.svc/minor-releases"
    - export MAJOR_VERSION=$(echo "${CI_COMMIT_TAG}" | sed "s/v/ /" | cut -d '.' -f1)
    - export MINOR_VERSION=$(echo "${CI_COMMIT_TAG}" | sed "s/v/ /" | cut -d '.' -f2)
    - export PATCH_VERSION=$(echo "${CI_COMMIT_TAG}" | sed "s/v/ /" | cut -d '.' -f3)
    - export MAJOR_RELEASE_ID=1
    - 'curl -X "POST" "${CREATE_RELEASE_ENDPOINT}" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"major_release_id\": ${MAJOR_RELEASE_ID}, \"major_version\": ${MAJOR_VERSION}, \"minor_version\": ${MINOR_VERSION}, \"patch_version\": ${PATCH_VERSION}, \"release_bucket_url\": \"${MINIO_RELEASE_PATH}\"}"'
  tags:
    - artifaktnd-cloud-runner
  only:
    refs:
      - tags
# all jobs after this stage (release) must use dependencies: [] to prevent download all artifacts
